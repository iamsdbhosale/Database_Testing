Database Testing :
https://www.youtube.com/playlist?list=PLUDwpEzHYYLtmxThtmsBxocKuicJOddGj
---
XAMPP Control Panel v3.3.0
MySQL Start
Link - http://localhost/phpmyadmin
---
create database classicmodels;
https://gist.github.com/prof3ssorSt3v3/796ebc82fd8eeb0b697effaa1e86c3a6#file-classicmodels-sql
---
use classicmodels;
show tables;
SELECT * from customers;
---
Schema Testing - table
1. check table presence in database schema
show tables;
2. check table name conventions
show tables;
3. check number of columns in a table {13}
select count(*) AS NumberOfColumns FROM information_schema.columns where table_name='customers';
Output:
NumberOfColumns
13
4. check column names in a table
SELECT column_name FROM information_schema.columns where table_name='customers';
Output:
column_name
customerNumber
customerName
contactLastName
contactFirstName
phone
addressLine1
addressLine2
city
state
postalCode
country
salesRepEmployeeNumber
creditLimit

5. check datatype of columns in table
select column_name,data_type from information_schema.columns where table_name='customers';
Output:

column_name              data_type
----------------------   ----------------
customerNumber           int
customerName             varchar
contactLastName          varchar
contactFirstName         varchar
phone                    varchar
addressLine1             varchar
addressLine2             varchar
city                     varchar
state                    varchar
postalCode               varchar
country                  varchar
salesRepEmployeeNumber   int
creditLimit              decimal


6. check size of the columns in a table
select column_name,column_type from information_schema.columns where table_name='customers';

column_name              column_type
----------------------   ----------------
customerNumber           int(11)
customerName             varchar(50)
contactLastName          varchar(50)
contactFirstName         varchar(50)
phone                    varchar(50)
addressLine1             varchar(50)
addressLine2             varchar(50)
city                     varchar(50)
state                    varchar(50)
postalCode               varchar(15)
country                  varchar(50)
salesRepEmployeeNumber   int(11)
creditLimit              decimal(10,2)

7. check nulls fileds in a table
select column_name, is_nullable from information_schema.columns where table_name='customers';
column_name              is_nullable
----------------------   ------------
customerNumber           NO
customerName             NO
contactLastName          NO
contactFirstName         NO
phone                    NO
addressLine1             NO
addressLine2             YES
city                     NO
state                    YES
postalCode               YES
country                  NO
salesRepEmployeeNumber   YES
creditLimit              YES
8. check column keys in a table
select column_name,column_key from information_schema.columns where table_name='customers';
column_name              column_key
----------------------   -----------
customerNumber           PRI
customerName             
contactLastName          
contactFirstName         
phone                    
addressLine1             
addressLine2             
city                     
state                    
postalCode               
country                  
salesRepEmployeeNumber   MUL
creditLimit 
---
metadata of table:
describe information_schema.columns;             
Field                      Type                     Null   Key   Default   Extra
------------------------   -----------------------  -----  ----  --------  ------
TABLE_CATALOG              varchar(512)             NO           NULL
TABLE_SCHEMA               varchar(64)              NO           NULL
TABLE_NAME                 varchar(64)              NO           NULL
COLUMN_NAME                varchar(64)              NO           NULL
ORDINAL_POSITION           bigint(21) unsigned      NO           NULL
COLUMN_DEFAULT             longtext                 YES          NULL
IS_NULLABLE                varchar(3)               NO           NULL
DATA_TYPE                  varchar(64)              NO           NULL
CHARACTER_MAXIMUM_LENGTH   bigint(21) unsigned      YES          NULL
CHARACTER_OCTET_LENGTH     bigint(21) unsigned      YES          NULL
NUMERIC_PRECISION          bigint(21) unsigned      YES          NULL
NUMERIC_SCALE              bigint(21) unsigned      YES          NULL
DATETIME_PRECISION         bigint(21) unsigned      YES          NULL
CHARACTER_SET_NAME         varchar(32)              YES          NULL
COLLATION_NAME             varchar(32)              YES          NULL
COLUMN_TYPE                longtext                 NO           NULL
COLUMN_KEY                 varchar(3)               NO           NULL
EXTRA                      varchar(80)              NO           NULL
PRIVILEGES                 varchar(80)              NO           NULL
COLUMN_COMMENT             varchar(1024)            NO           NULL
IS_GENERATED               varchar(6)               NO           NULL
GENERATION_EXPRESSION      longtext                 YES          NULL
---
Stored Procedure Testing:
delimiter //
create procedure SelectAllCustomers()
Begin
	select *from customers;
End//

delimiter ;
---
call SelectAllCustomers();
---
Single Parameter procedure :
delimiter //
create procedure SelectAllCustomersByCity(IN mycity varchar(50))
Begin
	select * from customers where city=mycity;
End//

delimiter ;
---
call SelectAllCustomersByCity('Singapore');
call SelectAllCustomersByCity('Nantes');
call SelectAllCustomersByCity('Las Vegas');
---
two Parameters procedure :
delimiter //
create procedure SelectAllCustomersByCityandPin(In mycity varchar(50),In pcode varchar(15))
begin
	select * from customers where city=mycity and postalCode=pcode;
end//

delimiter ;
---
call SelectAllCustomersByCityandPin('Singapore','079903');
---
select *from orders;
---
delimiter //
create procedure get_order_by_cust(
IN cust_no INT,
OUT shipped INT,
OUT canceled INT,
OUT resolved INT,
OUT disputed INT)
begin
	-- shipped -- is comment in sql
	select count(*) INTO shipped From orders where customerNumber=cust_no and status ='Shipped';
	-- canceled
	select count(*) INTO canceled From orders where customerNumber=cust_no and status ='Canceled';
	-- resolved
	select count(*) INTO resolved From orders where customerNumber=cust_no and status ='Resolved';
	-- disputed
	select count(*) INTO disputed From orders where customerNumber=cust_no and status ='Disputed';
end//
delimiter ;
---
call get_order_by_cust(141,@shipped,@canceled,@resolved,@disputed);
select @shipped,@canceled,@resolved,@disputed;
---
delimiter //
create procedure GetCustomerShipping(
	IN pCustomerNumber INT,
	OUT pShipping VARCHAR(50)
)
begin
	declare customerCountry varchar(100);
select country INTO customerCountry from customers where customerNumber=PCustomerNumber;
	case customerCountry
		when 'USA' then
			set pshipping='2-day Shipping';
		when 'Canada' then
			set pshipping='3-day Shipping';
		else
			set pshipping='5-day Shipping';
	end case;
end//
delimiter ;
---
call GetCustomerShipping('112',@shipping);
select @shipping;
---
call GetCustomerShipping('260',@shipping);
select @shipping;
---
call GetCustomerShipping('353',@shipping);
select @shipping;
---
procedure which is helping to perform error handling 
---
DELIMITER //

CREATE PROCEDURE test_error()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
  BEGIN
    SELECT 'Something went wrong!' AS error_message;
  END;

  -- Problematic query
  INSERT INTO students(id, name) VALUES ('abc', 'John');

END //

DELIMITER ;
---
CALL test_error();
------------------------------------------------------------------------------
Session 5 <-

